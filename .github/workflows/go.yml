name: Go Build & Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: arm64 

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.0'

    - name: Set GOOS and GOARCH
      run: |
        echo "GOOS=${{ matrix.goos }}" >> $GITHUB_ENV
        echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV

    - name: Build binary
      run: |
        output_name="myapp-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          output_name="${output_name}.exe"
        fi
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o "$output_name"
        echo "OUTPUT_FILE=$output_name" >> $GITHUB_ENV

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: safedotenv-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ${{ env.OUTPUT_FILE }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        files: artifacts/**/*

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
